<?php

use App\Model\ApiBadRequestException;
use App\Model\ApiRequestTask2;
use App\Model\TaskProcess;
use Nette\Application\Responses\JsonResponse;
use Nette\Application\Routers\Route;
use Nette\Application\Routers\RouteList;
use NetteModule\MicroPresenter;

// Load Nette Framework or autoloader generated by Composer
require __DIR__ . '/../../vendor/autoload.php';

$configurator = new Nette\Config\Configurator;

// Enable Nette Debugger for error visualisation & logging
//$configurator->setDebugMode(TRUE);
 @mkdir(__DIR__ . '/log', 0755, true);
$configurator->enableDebugger(__DIR__ . '/log');

// Specify folder for cache
 @mkdir(__DIR__ . '/temp', 0755, true);
$configurator->setTempDirectory(__DIR__ . '/temp');

// Enable RobotLoader - this will load all classes automatically
$configurator   ->createRobotLoader()
                ->addDirectory(__DIR__)
                ->register();

// Create Dependency Injection container from config.neon file
$configurator->addConfig(__DIR__ . '/config/config.neon');
$container = $configurator->createContainer();

/* @var $route RouteList */
$router = $container->getService('router');

$router[] = new Route('input', function ($presenter) use ($container) {
    /* @var $presenter MicroPresenter */
    
    /* @var $apiRequest ApiRequestTask2 */
    $apiRequest = $container->getByType('App\Model\IApiRequest');
    
    /* @var $taskProcess TaskProcess */
    $taskProcess = $container->getByType('App\Model\TaskProcess');
    
    try {
        $data = $apiRequest->getRequestData();
        $processResult = $taskProcess->init($data);
        return new JsonResponse(['result' => $processResult]);
    } catch (ApiBadRequestException $ex) {
        return new JsonResponse(['errorMessage' => $ex->getMessage()]);
    }
});

$router[] = new Route('', function ($presenter) {
    /* @var $presenter MicroPresenter */
    return new JsonResponse(['api' => 'task2',]);
});

return $container;